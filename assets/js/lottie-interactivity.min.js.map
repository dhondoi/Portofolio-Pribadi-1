{"version":3,"file":"lottie-interactivity.min.js","sources":["../src/main.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n  player: 'lottie-player',\n};\nconst LOTTIE_PLAYER_NODE = 'LOTTIE-PLAYER';\nconst ERROR_PREFIX = '[lottieInteractivity]:';\n\n/**\n * LottieFiles interactivity for Lottie\n */\nexport class LottieInteractivity {\n  constructor({ actions, container, mode, player, ...options } = DEFAULT_OPTIONS) {\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n  }\n\n  getContainerVisibility() {\n    // Get the bounding box for the lottie player or container\n    const { top, height } = this.container.getBoundingClientRect();\n\n    // Calculate current view percentage\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    return current / max;\n  }\n\n  getContainerCursorPosition(cursorX, cursorY) {\n    const { top, left, width, height } = this.container.getBoundingClientRect();\n\n    const x = (cursorX - left) / width;\n    const y = (cursorY - top) / height;\n\n    return { x, y };\n  }\n\n  start() {\n    const Parentscope = this;\n    // Configure player for start\n    if (this.mode === 'scroll') {\n      this.player.addEventListener('DOMLoaded', function () {\n        Parentscope.player.stop();\n        window.addEventListener('scroll', Parentscope.#scrollHandler);\n      });\n    } else if (this.mode === 'cursor') {\n      this.player.addEventListener('DOMLoaded', function () {\n        // To have click and hover interaction, force to only have that type and single action\n        // If there are multiple actions, click and hover are ignored\n        if (Parentscope.actions &&\n          Parentscope.actions.length === 1) {\n          if (Parentscope.actions[0].type === \"click\") {\n            Parentscope.player.loop = false;\n            Parentscope.player.stop();\n            Parentscope.container.addEventListener('click', Parentscope.#clickHoverHandler);\n          } else if (Parentscope.actions[0].type === \"hover\") {\n            Parentscope.player.loop = false;\n            Parentscope.player.stop();\n            Parentscope.container.addEventListener('mouseenter', Parentscope.#clickHoverHandler);\n          } else if (Parentscope.actions[0].type === \"hold\" || Parentscope.actions[0].type === \"pauseHold\") {\n            Parentscope.container.addEventListener('mouseenter', Parentscope.#holdTransitionEnter);\n            Parentscope.container.addEventListener('mouseleave', Parentscope.#holdTransitionLeave);\n          } else if (Parentscope.actions[0].type === \"seek\") {\n            Parentscope.player.loop = true;\n            Parentscope.player.stop();\n            Parentscope.container.addEventListener('mousemove', Parentscope.#mousemoveHandler);\n            Parentscope.container.addEventListener('mouseout', Parentscope.#mouseoutHandler);\n          }\n        } else {\n          Parentscope.player.loop = true;\n          Parentscope.player.stop();\n          Parentscope.container.addEventListener('mousemove', Parentscope.#mousemoveHandler);\n          Parentscope.container.addEventListener('mouseout', Parentscope.#mouseoutHandler);\n        }\n      });\n    } else if (this.mode === 'chain') {\n      // When passing animation object to LI the player is already loaded\n      if (this.player.isLoaded) {\n        Parentscope.#initInteractionMaps();\n        Parentscope.player.loop = false;\n        Parentscope.player.stop();\n        Parentscope.#chainedInteractionHandler({ignorePath: false});\n      } else {\n        this.player.addEventListener('DOMLoaded', function () {\n          Parentscope.#initInteractionMaps();\n          Parentscope.player.loop = false;\n          Parentscope.player.stop();\n          Parentscope.#chainedInteractionHandler({ignorePath: false});\n        });\n      }\n    }\n  }\n\n  redefineOptions({actions, container, mode, player, ...options}) {\n    this.stop();\n    this.player.stop();\n\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message, player);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n\n    this.start();\n  }\n\n  stop() {\n    if (this.mode === 'scroll') {\n      window.removeEventListener('scroll', this.#scrollHandler);\n    }\n\n    if (this.mode === 'cursor') {\n        this.container.removeEventListener('click', this.#clickHoverHandler);\n        this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n        this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n        this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n    }\n\n    if (this.mode === 'chain') {\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('click', this.#clickHoverStateHandler);\n\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n\n      this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n      this.player.removeEventListener('complete', this.#onCompleteHandler);\n      this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n      this.player.removeEventListener('enterFrame', this.#holdTransitionHandler);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Init the state and transitions maps containing all the state and transition methods used for interaction chaining\n   */\n  #initInteractionMaps = () => {\n    if (!this.player)\n      return ;\n\n    let loopState = () => {\n      if (this.actions[this.interactionIdx].loop) {\n        this.player.loop = parseInt(this.actions[this.interactionIdx].loop) - 1;\n      } else {\n        this.player.loop = true;\n      }\n      this.player.autoplay = true;\n    }\n    let autoplayState = () => {\n      this.player.loop = false;\n      this.player.autoplay = true;\n    }\n    let clickState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('click', this.#clickHoverStateHandler);\n    }\n    let hoverState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('mouseenter', this.#clickHoverStateHandler);\n    }\n    let clickTransition = () => {\n      this.container.addEventListener('click', this.#clickHoverHandler);\n    }\n    let hoverTransition = () => {\n      this.container.addEventListener('mouseenter', this.#clickHoverHandler);\n    }\n    let holdTransition = () => {\n      this.player.addEventListener('enterFrame', this.#holdTransitionHandler);\n      this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n    }\n    let repeatTransition = () => {\n      this.player.loop = true;\n      this.player.autoplay = true;\n      let handler = () => { this.#repeatTransition({handler}) };\n      this.player.addEventListener('loopComplete', handler);\n    }\n    let onCompleteTransition = () => {\n      let state = this.actions[this.interactionIdx].state;\n\n      if (state === 'loop')\n        this.player.addEventListener('loopComplete', this.#onCompleteHandler);\n      else\n        this.player.addEventListener('complete', this.#onCompleteHandler);\n    }\n    let cursorSyncTransition = () => {\n      this.player.stop();\n      this.player.addEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('mouseout', this.#mouseoutHandler);\n    }\n    this.stateHandler.set('loop', loopState);\n    this.stateHandler.set('autoplay', autoplayState);\n    this.stateHandler.set('click', clickState);\n    this.stateHandler.set('hover', hoverState);\n\n    this.transitionHandler.set('click', clickTransition);\n    this.transitionHandler.set('hover', hoverTransition);\n    this.transitionHandler.set('hold', holdTransition);\n    this.transitionHandler.set('pauseHold', holdTransition);\n    this.transitionHandler.set('repeat', repeatTransition);\n    this.transitionHandler.set('onComplete', onCompleteTransition);\n    this.transitionHandler.set('seek', cursorSyncTransition);\n  }\n\n  /**\n   * [chain mode]\n   * Handle hover state on chained interactions\n   */\n  #clickHoverStateHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n\n    if (!forceFlag && this.player.isPaused === true) {\n      this.#playSegmentHandler(true);\n    } else if (forceFlag) {\n      this.#playSegmentHandler(true);\n    }\n  }\n\n  /**\n   * [cursor + chain mode]\n   * Handle click and hover in both cursor and chain mode\n   */\n  #clickHoverHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n\n    // If we're in chain mode and the click or hover transition is used, otherwise just play the animation\n    if (this.mode === 'chain') {\n      // Check if there is a counter or not and make a transition\n      if (this.actions[this.interactionIdx].count) {\n        let clickLimit = parseInt(this.actions[this.interactionIdx].count);\n        if (this.clickCounter < clickLimit - 1) {\n          this.clickCounter += 1;\n          return ;\n        }\n      }\n      // No click counter, so we remove the listeners and got to next interaction\n      this.clickCounter = 0;\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.#nextInteraction();\n      return ;\n    }\n    // Using goToAndPlay rather than this.#playSegmentHandler(forceFlag) because we're in cursor mode\n    // there for we want to play from the beginning\n    if (!forceFlag && this.player.isPaused === true) {\n      this.player.goToAndPlay(0, true);\n    } else if (forceFlag) {\n      this.player.goToAndPlay(0, true);\n    }\n  }\n\n  // [cursor mode]\n  #mousemoveHandler = e => {\n    this.#cursorHandler(e.clientX, e.clientY);\n  };\n\n  // [cursor mode]\n  #mouseoutHandler = () => {\n    this.#cursorHandler(-1, -1);\n  };\n\n\n  /**\n   * [chain mode]\n   * Handle when a segment of the animation has finished playing\n   */\n  #onCompleteHandler = () => {\n      if (this.actions[this.interactionIdx].state === 'loop') {\n        this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n      } else {\n        this.player.removeEventListener('complete', this.#onCompleteHandler);\n      }\n      this.#nextInteraction();\n  }\n\n  // [chain mode]\n  #repeatTransition = ({handler}) => {\n    let repeatAmount = 1;\n\n    if (this.actions[this.interactionIdx].repeat)\n      repeatAmount = this.actions[this.interactionIdx].repeat;\n    if (this.playCounter >= repeatAmount - 1) {\n      this.playCounter = 0;\n      this.player.removeEventListener('loopComplete', handler);\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.#nextInteraction();\n    } else {\n      this.playCounter += 1;\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   */\n  #cursorSyncHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if (frames && this.player.currentFrame >= parseInt(frames[1]) - 1) {\n      this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n      setTimeout(this.#nextInteraction, 0);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   *\n   * With the hold transition we can't use playSegment so we have to manually verify if\n   * The user held long enough and check if the current frame is within the segment limits\n   *\n   */\n  #holdTransitionHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if ((frames && this.player.currentFrame >= frames[1]) || (this.player.currentFrame >= this.player.totalFrames - 1)) {\n      this.player.removeEventListener('enterFrame', this.#holdTransitionHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      this.player.pause();\n      this.#nextInteraction();\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionEnter = () => {\n    if (this.player.playDirection === -1\n      || this.player.currentFrame === 0\n      || this.actions[this.interactionIdx].transition === \"pauseHold\"\n      || this.actions[0].type === \"pauseHold\") {\n      this.player.setDirection(1);\n      this.player.play();\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionLeave = () => {\n    if (this.actions[this.interactionIdx].transition === \"hold\" || this.actions[0].type === \"hold\") {\n      this.player.setDirection(-1);\n      this.player.play();\n    } else if (this.actions[this.interactionIdx].transition === \"pauseHold\" || this.actions[0].type === \"pauseHold\"){\n      this.player.pause();\n    }\n  }\n\n  // [chain mode]\n  #clearStateListeners = () => {\n    let state = this.actions[this.interactionIdx].state;\n\n    if (state === \"hover\" || state === \"click\") {\n      this.container.removeEventListener('click', this.#clickHoverStateHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n    }\n  }\n\n  // [chain mode]\n  #nextInteraction = () => {\n    let oldIdx =  this.interactionIdx;\n\n    // If state is hover or click we need to remove listeners\n    this.#clearStateListeners();\n\n    // Check if theres a jump-to before incrementing\n    let jumpToIndex = this.actions[this.interactionIdx].jumpTo;\n    if (jumpToIndex) {\n      // If jumpToIndex is inside action length jump to it otherwise go to first action\n      if (jumpToIndex >= 0 && jumpToIndex < this.actions.length) {\n        this.interactionIdx = jumpToIndex;\n        this.#chainedInteractionHandler({ignorePath: false});\n      } else {\n        this.interactionIdx = 0;\n        this.player.goToAndStop(0, true);\n        this.#chainedInteractionHandler({ignorePath: false});\n      }\n    } else {\n      // Go to next interaction\n      this.interactionIdx++;\n      if (this.interactionIdx >= this.actions.length) {\n        // Go back to the first interaction\n        if (this.actions[this.actions.length - 1].reset) {\n          this.interactionIdx = 0;\n          this.player.goToAndStop(0, true);\n          this.#chainedInteractionHandler({ignorePath: false});\n        }\n        else {\n          this.interactionIdx = this.actions.length - 1;\n          this.#chainedInteractionHandler({ignorePath: false});\n        }\n      } else {\n        this.#chainedInteractionHandler({ignorePath: false});\n      }\n    }\n\n    // Emit event from the lottie-player element\n    this.container.dispatchEvent(new CustomEvent(\"transition\", {\n      bubbles: true,\n      composed: true,\n      detail: { oldIndex: oldIdx, newIndex: this.interactionIdx }\n    }));\n  }\n\n  /**\n   * [chain mode]\n   * Checks if frames are an array or string, and calls appropriate method to play animation\n   */\n  #playSegmentHandler = (forceFlag) => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    //If no frame segment is defined, play the whole animation\n    if (!frames) {\n      this.player.resetSegments(true);\n      this.player.goToAndPlay(0, true);\n      return ;\n    }\n    // If using named markers\n    if (typeof frames === 'string') {\n      this.player.goToAndPlay(frames, forceFlag);\n    } else {\n      this.player.playSegments(frames, forceFlag);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Load a new animation using the path defined in the current interaction\n   */\n  #loadAnimationInChain = () => {\n    let path = this.actions[this.interactionIdx].path;\n\n    // The animation path declared on the lottie-player was saved in the constructor under 'enteredPlayer'\n    // We assume that the path on the lottie-player element is the animation to use in the first action\n    if (!path) {\n      // If we passed animationData to Lottie-Interactivity, load the animation data otherwise use the path\n      if (typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem') {\n        path = this.enteredPlayer;\n\n        if (this.player === path) {\n          this.#chainedInteractionHandler({ignorePath: true});\n          return ;\n        }\n      } else {\n        path = this.loadedAnimation;\n        let fileName = path.substr(path.lastIndexOf('/') + 1);\n        fileName = fileName.substr(0, fileName.lastIndexOf('.json'));\n\n        // Prevents reloading animation the same animation\n        if (this.player.fileName === fileName) {\n          this.#chainedInteractionHandler({ignorePath: true});\n          return ;\n        }\n      }\n    }\n\n    // Force width and height on the container to retain its size while the next animation is being loaded\n    let lottieContainerSize = this.container.getBoundingClientRect();\n    let newContainerStyle = \"width: \" + lottieContainerSize.width + \"px !important; height: \" +\n      lottieContainerSize.height + \"px !important; background: \" + this.container.style.background;\n    this.container.setAttribute('style', newContainerStyle);\n\n    if (!(typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem')) {\n      if (typeof this.enteredPlayer === 'string') {\n        const elem = document.querySelector(this.enteredPlayer);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n          if (!this.attachedListeners) {\n            // Remove the styling that prevents flickering\n            elem.addEventListener(\"ready\", () => {\n              this.container.style.width = '';\n              this.container.style.height = '';\n            });\n            elem.addEventListener(\"load\", () => {\n              this.player = elem.getLottie();\n              this.#chainedInteractionHandler({ignorePath: true});\n            });\n            this.attachedListeners = true;\n          }\n          // The LottieFiles player destroys the animation when a new one is Loaded\n         elem.load(path);\n        }\n      } else if (this.enteredPlayer instanceof HTMLElement && this.enteredPlayer.nodeName === LOTTIE_PLAYER_NODE) {\n        // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n        if (!this.attachedListeners) {\n          // Remove the styling that prevents flickering\n          this.enteredPlayer.addEventListener(\"ready\", () => {\n            this.container.style.width = '';\n            this.container.style.height = '';\n          });\n          this.enteredPlayer.addEventListener(\"load\", () => {\n            this.player = this.enteredPlayer.getLottie();\n            this.#chainedInteractionHandler({ignorePath: true});\n          });\n          this.attachedListeners = true;\n        }\n        // The LottieFiles player destroys the animation when a new one is Loaded\n        this.enteredPlayer.load(path);\n      }\n      // Throw error no player instance has been successfully resolved\n      if (!this.player) {\n        throw new Error(`${ERROR_PREFIX} Specified player is invalid.`, this.enteredPlayer);\n      }\n    } else {\n      if (window.lottie) {\n        this.stop();\n        this.player.destroy();\n        // Removes svg animation contained inside\n        this.container.innerHTML = \"\";\n\n        if (typeof path === 'object' && path.constructor.name === 'AnimationItem') {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            animationData: path.animationData,\n            container: this.container\n          });\n        }\n        else {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            path,\n            container: this.container\n          });\n        }\n\n        this.player.addEventListener('DOMLoaded', () => {\n          // Remove the styling that prevents flickering\n          this.container.style.width = '';\n          this.container.style.height = '';\n          this.#chainedInteractionHandler({ignorePath: true});\n        });\n      } else {\n        throw new Error(`${ERROR_PREFIX} A Lottie player is required.`);\n      }\n    }\n    // Reset counters\n    this.clickCounter = 0;\n    this.playCounter = 0;\n  }\n\n  /**\n   * [chain mode]\n   * Check the action object at the current interaction index and set the needed interaction listeners as well\n   * as any extra options\n   */\n  #chainedInteractionHandler = ({ignorePath}) => {\n    let state = this.actions[this.interactionIdx].state;\n    let transition = this.actions[this.interactionIdx].transition;\n    let path = this.actions[this.interactionIdx].path;\n    let stateFunction = this.stateHandler.get(state);\n    let transitionFunction = this.transitionHandler.get(transition);\n    let speed = this.actions[this.interactionIdx].speed ? this.actions[this.interactionIdx].speed : 1;\n    let delay = this.actions[this.interactionIdx].delay ? this.actions[this.interactionIdx].delay : 0;\n\n    // Check if path is detected or that we are at the beginning again and reset\n    // If we are back at the first action, we need to reload the animation declared on the lottie-player element\n    if (!ignorePath && (path || (this.actions[this.actions.length - 1].reset && this.interactionIdx === 0))) {\n      this.#loadAnimationInChain();\n      return ;\n    }\n    setTimeout( () => {\n      if (stateFunction) {\n        stateFunction.call();\n      } else if (state === \"none\") {\n        this.player.loop = false;\n        this.player.autoplay = false;\n      }\n      if (transitionFunction) {\n        transitionFunction.call();\n      }\n      if (this.player.autoplay) {\n        this.player.resetSegments(true);\n        this.#playSegmentHandler(true);\n      }\n      this.player.setSpeed(speed);\n    }, delay);\n  }\n\n  // [cursor mode]\n  #cursorHandler = (x, y) => {\n    // Resolve cursor position if cursor is inside container\n    if (x !== -1 && y !== -1) {\n      // Get container cursor position\n      const pos = this.getContainerCursorPosition(x, y);\n\n      // Use the resolved position\n      x = pos.x;\n      y = pos.y;\n    }\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(({ position }) => {\n      if (position) {\n        if (Array.isArray(position.x) && Array.isArray(position.y)) {\n          return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n        } else if (!Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n          return x === position.x && y === position.y;\n        }\n      }\n\n      return false;\n    });\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek' || action.transition === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n      const yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n\n      this.player.playSegments(action.frames, true);\n\n      if (action.position.y[0] < 0 && action.position.y[1] > 1) {\n        this.player.goToAndStop(Math.floor(xPercent * this.player.totalFrames), true);\n      } else {\n        this.player.goToAndStop(Math.ceil(((xPercent + yPercent) / 2) * this.player.totalFrames), true);\n      }\n    } else if (action.type === 'loop') {\n      this.player.playSegments(action.frames, true);\n    } else if (action.type === 'play') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (this.player.isPaused === true) {\n        this.player.resetSegments();\n      }\n      this.player.playSegments(action.frames);\n    } else if (action.type === 'stop') {\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n\n  // [scroll mode]\n  #scrollHandler = () => {\n    // Get container visibility percentage\n    const currentPercent = this.getContainerVisibility();\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(\n      ({ visibility }) => currentPercent >= visibility[0] && currentPercent <= visibility[1],\n    );\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const start = action.frames[0];\n      const end = action.frames.length == 2 ? action.frames[1] : (this.player.totalFrames - 1);\n\n      // Use global frame reference for frames within the seek section.\n      // Without this, if you follow a seek with a loop and then scroll back up,\n      // it will treat frame numbers as relative to the loop.\n      if (this.assignedSegment !== null) {\n        this.player.resetSegments(true);\n        this.assignedSegment = null;\n      }\n\n      this.player.goToAndStop(\n        start + Math.round(\n          ((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0])) *\n            (end - start)\n        ),\n        true,\n      );\n    } else if (action.type === 'loop') {\n      this.player.loop = true;\n      // Loop: Loop a given frames\n      if (this.assignedSegment === null) {\n        // if not playing any segments currently. play those segments and save to state\n        this.player.playSegments(action.frames, true);\n        this.assignedSegment = action.frames;\n      } else {\n        // if playing any segments currently.\n        //check if segments in state are equal to the frames selected by action\n        if (this.assignedSegment !== action.frames) {\n          // if they are not equal. new segments are to be loaded\n          this.player.playSegments(action.frames, true);\n          this.assignedSegment = action.frames;\n        } else {\n          // if they are equal the play method must be called only if lottie is paused\n          if (this.player.isPaused === true) {\n            this.player.playSegments(action.frames, true);\n            this.assignedSegment = action.frames;\n          }\n        }\n      }\n    } else if (action.type === 'play') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (!this.scrolledAndPlayed) {\n        this.scrolledAndPlayed = true;\n        this.player.resetSegments(true);\n        this.player.play();\n      }\n    } else if (action.type === 'stop') {\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n}\n\nexport const create = options => {\n  const instance = new LottieInteractivity(options);\n  instance.start();\n\n  return instance;\n};\n\nexport default create;\n"],"names":["DEFAULT_OPTIONS","player","ERROR_PREFIX","LottieInteractivity","actions","container","mode","options","_this","holdTransition","addEventListener","stateHandler","set","interactionIdx","loop","parseInt","autoplay","transitionHandler","handler","state","stop","forceFlag","isPaused","count","clickLimit","clickCounter","removeEventListener","goToAndPlay","e","clientX","clientY","repeatAmount","repeat","playCounter","frames","currentFrame","setTimeout","totalFrames","pause","playDirection","transition","type","setDirection","play","oldIdx","jumpToIndex","jumpTo","length","ignorePath","goToAndStop","reset","dispatchEvent","CustomEvent","bubbles","composed","detail","oldIndex","newIndex","resetSegments","playSegments","path","_typeof","enteredPlayer","constructor","name","fileName","loadedAnimation","substr","lastIndexOf","lottieContainerSize","getBoundingClientRect","newContainerStyle","width","height","style","background","setAttribute","elem","document","querySelector","nodeName","attachedListeners","getLottie","load","HTMLElement","Error","window","lottie","destroy","innerHTML","loadAnimation","animationData","stateFunction","get","transitionFunction","speed","delay","call","setSpeed","x","y","pos","getContainerCursorPosition","action","find","position","Array","isArray","Number","isNaN","xPercent","yPercent","Math","floor","ceil","currentPercent","getContainerVisibility","visibility","start","end","assignedSegment","round","scrolledAndPlayed","message","wrapper","this","Map","top","innerHeight","cursorX","cursorY","left","Parentscope","isLoaded","create","instance"],"mappings":"4rCAAA,IAAMA,EAAkB,CACtBC,OAAQ,iBAGJC,EAAe,yBAKRC,8FACoDH,EAAjDI,IAAAA,QAASC,IAAAA,UAAWC,IAAAA,KAAML,IAAAA,OAAWM,0FA2N5B,cAChBC,EAAKP,YA+BNQ,EAAiB,WACnBD,EAAKP,OAAOS,iBAAiB,eAAcF,MAC3CA,EAAKH,UAAUK,iBAAiB,eAAcF,MAC9CA,EAAKH,UAAUK,iBAAiB,eAAcF,OAsBhDA,EAAKG,aAAaC,IAAI,QArDN,WACVJ,EAAKJ,QAAQI,EAAKK,gBAAgBC,KACpCN,EAAKP,OAAOa,KAAOC,SAASP,EAAKJ,QAAQI,EAAKK,gBAAgBC,MAAQ,EAEtEN,EAAKP,OAAOa,MAAO,EAErBN,EAAKP,OAAOe,UAAW,KAgDzBR,EAAKG,aAAaC,IAAI,YA9CF,WAClBJ,EAAKP,OAAOa,MAAO,EACnBN,EAAKP,OAAOe,UAAW,KA6CzBR,EAAKG,aAAaC,IAAI,SA3CL,WACfJ,EAAKP,OAAOa,MAAO,EACnBN,EAAKP,OAAOe,UAAW,EACvBR,EAAKH,UAAUK,iBAAiB,UAASF,SAyC3CA,EAAKG,aAAaC,IAAI,SAvCL,WACfJ,EAAKP,OAAOa,MAAO,EACnBN,EAAKP,OAAOe,UAAW,EACvBR,EAAKH,UAAUK,iBAAiB,eAAcF,SAsChDA,EAAKS,kBAAkBL,IAAI,SApCL,WACpBJ,EAAKH,UAAUK,iBAAiB,UAASF,SAoC3CA,EAAKS,kBAAkBL,IAAI,SAlCL,WACpBJ,EAAKH,UAAUK,iBAAiB,eAAcF,SAkChDA,EAAKS,kBAAkBL,IAAI,OAAQH,GACnCD,EAAKS,kBAAkBL,IAAI,YAAaH,GACxCD,EAAKS,kBAAkBL,IAAI,UA7BJ,WACrBJ,EAAKP,OAAOa,MAAO,EACnBN,EAAKP,OAAOe,UAAW,EAEvBR,EAAKP,OAAOS,iBAAiB,gBADf,SAAVQ,MAAkBV,UAAAA,EAAuB,CAACU,QAAAA,UA2BhDV,EAAKS,kBAAkBL,IAAI,cAxBA,WAGX,SAFFJ,EAAKJ,QAAQI,EAAKK,gBAAgBM,MAG5CX,EAAKP,OAAOS,iBAAiB,iBAAgBF,MAE7CA,EAAKP,OAAOS,iBAAiB,aAAYF,SAmB7CA,EAAKS,kBAAkBL,IAAI,QAjBA,WACzBJ,EAAKP,OAAOmB,OACZZ,EAAKP,OAAOS,iBAAiB,eAAcF,MAC3CA,EAAKH,UAAUK,iBAAiB,cAAaF,MAC7CA,EAAKH,UAAUK,iBAAiB,aAAYF,2CAoBtB,eACpBa,EAAYb,EAAKJ,QAAQI,EAAKK,gBAAgBQ,UAE7CA,IAAsC,IAAzBb,EAAKP,OAAOqB,SAEnBD,KACTb,UAAAA,GAAyB,KAFzBA,UAAAA,GAAyB,oCAUR,eACfa,EAAYb,EAAKJ,QAAQI,EAAKK,gBAAgBQ,aAGhC,UAAdb,EAAKF,KAAkB,IAErBE,EAAKJ,QAAQI,EAAKK,gBAAgBU,MAAO,KACvCC,EAAaT,SAASP,EAAKJ,QAAQI,EAAKK,gBAAgBU,UACxDf,EAAKiB,aAAeD,EAAa,cACnChB,EAAKiB,cAAgB,UAKzBjB,EAAKiB,aAAe,EACpBjB,EAAKH,UAAUqB,oBAAoB,UAASlB,MAC5CA,EAAKH,UAAUqB,oBAAoB,eAAclB,aACjDA,UAAAA,GAKGa,IAAsC,IAAzBb,EAAKP,OAAOqB,SAEnBD,GACTb,EAAKP,OAAO0B,YAAY,GAAG,GAF3BnB,EAAKP,OAAO0B,YAAY,GAAG,oCAOX,SAAAC,KAClBpB,UAAAA,EAAoBoB,EAAEC,QAASD,EAAEE,0CAIhB,aACjBtB,UAAAA,GAAqB,GAAI,oCAQN,WAC+B,SAA5CA,EAAKJ,QAAQI,EAAKK,gBAAgBM,MACpCX,EAAKP,OAAOyB,oBAAoB,iBAAgBlB,MAEhDA,EAAKP,OAAOyB,oBAAoB,aAAYlB,QAE9CA,UAAAA,oCAIgB,gBAAEU,IAAAA,QAChBa,EAAe,EAEfvB,EAAKJ,QAAQI,EAAKK,gBAAgBmB,SACpCD,EAAevB,EAAKJ,QAAQI,EAAKK,gBAAgBmB,QAC/CxB,EAAKyB,aAAeF,EAAe,GACrCvB,EAAKyB,YAAc,EACnBzB,EAAKP,OAAOyB,oBAAoB,eAAgBR,GAChDV,EAAKP,OAAOa,MAAO,EACnBN,EAAKP,OAAOe,UAAW,IACvBR,UAAAA,IAEAA,EAAKyB,aAAe,mCAQH,eACfC,EAAS1B,EAAKJ,QAAQI,EAAKK,gBAAgBqB,OAE3CA,GAAU1B,EAAKP,OAAOkC,cAAgBpB,SAASmB,EAAO,IAAM,IAC9D1B,EAAKP,OAAOyB,oBAAoB,eAAclB,MAC9CA,EAAKH,UAAUqB,oBAAoB,cAAalB,MAChDA,EAAKH,UAAUqB,oBAAoB,aAAYlB,MAC/C4B,aAAW5B,KAAuB,qCAYb,eACnB0B,EAAS1B,EAAKJ,QAAQI,EAAKK,gBAAgBqB,QAE1CA,GAAU1B,EAAKP,OAAOkC,cAAgBD,EAAO,IAAQ1B,EAAKP,OAAOkC,cAAgB3B,EAAKP,OAAOoC,YAAc,KAC9G7B,EAAKP,OAAOyB,oBAAoB,eAAclB,MAC9CA,EAAKH,UAAUqB,oBAAoB,eAAclB,MACjDA,EAAKH,UAAUqB,oBAAoB,eAAclB,MACjDA,EAAKP,OAAOqC,UACZ9B,UAAAA,qCAKmB,YACc,IAA/BA,EAAKP,OAAOsC,eACkB,IAA7B/B,EAAKP,OAAOkC,cACqC,cAAjD3B,EAAKJ,QAAQI,EAAKK,gBAAgB2B,YACT,cAAzBhC,EAAKJ,QAAQ,GAAGqC,OACnBjC,EAAKP,OAAOyC,aAAa,GACzBlC,EAAKP,OAAO0C,yCAKO,WACgC,SAAjDnC,EAAKJ,QAAQI,EAAKK,gBAAgB2B,YAAkD,SAAzBhC,EAAKJ,QAAQ,GAAGqC,MAC7EjC,EAAKP,OAAOyC,cAAc,GAC1BlC,EAAKP,OAAO0C,QAC8C,cAAjDnC,EAAKJ,QAAQI,EAAKK,gBAAgB2B,YAAuD,cAAzBhC,EAAKJ,QAAQ,GAAGqC,MACzFjC,EAAKP,OAAOqC,yCAKO,eACjBnB,EAAQX,EAAKJ,QAAQI,EAAKK,gBAAgBM,MAEhC,UAAVA,GAA+B,UAAVA,IACvBX,EAAKH,UAAUqB,oBAAoB,UAASlB,MAC5CA,EAAKH,UAAUqB,oBAAoB,eAAclB,wCAKlC,eACboC,EAAUpC,EAAKK,iBAGnBL,UAAAA,OAGIqC,EAAcrC,EAAKJ,QAAQI,EAAKK,gBAAgBiC,OAChDD,EAEEA,GAAe,GAAKA,EAAcrC,EAAKJ,QAAQ2C,QACjDvC,EAAKK,eAAiBgC,IACtBrC,UAAAA,EAAgC,CAACwC,YAAY,MAE7CxC,EAAKK,eAAiB,EACtBL,EAAKP,OAAOgD,YAAY,GAAG,KAC3BzC,UAAAA,EAAgC,CAACwC,YAAY,MAI/CxC,EAAKK,iBACDL,EAAKK,gBAAkBL,EAAKJ,QAAQ2C,OAElCvC,EAAKJ,QAAQI,EAAKJ,QAAQ2C,OAAS,GAAGG,OACxC1C,EAAKK,eAAiB,EACtBL,EAAKP,OAAOgD,YAAY,GAAG,KAC3BzC,UAAAA,EAAgC,CAACwC,YAAY,MAG7CxC,EAAKK,eAAiBL,EAAKJ,QAAQ2C,OAAS,IAC5CvC,UAAAA,EAAgC,CAACwC,YAAY,OAG/CxC,UAAAA,EAAgC,CAACwC,YAAY,KAKjDxC,EAAKH,UAAU8C,cAAc,IAAIC,YAAY,aAAc,CACzDC,SAAS,EACTC,UAAU,EACVC,OAAQ,CAAEC,SAAUZ,EAAQa,SAAUjD,EAAKK,oDAQzB,SAACQ,OACjBa,EAAS1B,EAAKJ,QAAQI,EAAKK,gBAAgBqB,WAG1CA,SACH1B,EAAKP,OAAOyD,eAAc,QAC1BlD,EAAKP,OAAO0B,YAAY,GAAG,GAIP,iBAAXO,EACT1B,EAAKP,OAAO0B,YAAYO,EAAQb,GAEhCb,EAAKP,OAAO0D,aAAazB,EAAQb,oCAQb,eAClBuC,EAAOpD,EAAKJ,QAAQI,EAAKK,gBAAgB+C,SAIxCA,KAE+B,WAA9BC,EAAOrD,EAAKsD,gBAAsE,kBAAxCtD,EAAKsD,cAAcC,YAAYC,SAC3EJ,EAAOpD,EAAKsD,cAERtD,EAAKP,SAAW2D,gBAClBpD,UAAAA,EAAgC,CAACwC,YAAY,QAG1C,KAEDiB,GADJL,EAAOpD,EAAK0D,iBACQC,OAAOP,EAAKQ,YAAY,KAAO,MACnDH,EAAWA,EAASE,OAAO,EAAGF,EAASG,YAAY,UAG/C5D,EAAKP,OAAOgE,WAAaA,gBAC3BzD,UAAAA,EAAgC,CAACwC,YAAY,QAO/CqB,EAAsB7D,EAAKH,UAAUiE,wBACrCC,EAAoB,UAAYF,EAAoBG,MAAQ,0BAC9DH,EAAoBI,OAAS,8BAAgCjE,EAAKH,UAAUqE,MAAMC,cACpFnE,EAAKH,UAAUuE,aAAa,QAASL,GAED,WAA9BV,EAAOrD,EAAKsD,gBAAsE,kBAAxCtD,EAAKsD,cAAcC,YAAYC,KAA2B,IACtE,iBAAvBxD,EAAKsD,cAA4B,KACpCe,EAAOC,SAASC,cAAcvE,EAAKsD,eAErCe,GA/iBe,kBA+iBPA,EAAKG,WAEVxE,EAAKyE,oBAERJ,EAAKnE,iBAAiB,SAAS,WAC7BF,EAAKH,UAAUqE,MAAMF,MAAQ,GAC7BhE,EAAKH,UAAUqE,MAAMD,OAAS,MAEhCI,EAAKnE,iBAAiB,QAAQ,WAC5BF,EAAKP,OAAS4E,EAAKK,cACnB1E,UAAAA,EAAgC,CAACwC,YAAY,OAE/CxC,EAAKyE,mBAAoB,GAG5BJ,EAAKM,KAAKvB,SAEFpD,EAAKsD,yBAAyBsB,aAhkBpB,kBAgkBmC5E,EAAKsD,cAAckB,WAEpExE,EAAKyE,oBAERzE,EAAKsD,cAAcpD,iBAAiB,SAAS,WAC3CF,EAAKH,UAAUqE,MAAMF,MAAQ,GAC7BhE,EAAKH,UAAUqE,MAAMD,OAAS,MAEhCjE,EAAKsD,cAAcpD,iBAAiB,QAAQ,WAC1CF,EAAKP,OAASO,EAAKsD,cAAcoB,cACjC1E,UAAAA,EAAgC,CAACwC,YAAY,OAE/CxC,EAAKyE,mBAAoB,GAG3BzE,EAAKsD,cAAcqB,KAAKvB,QAGrBpD,EAAKP,aACF,IAAIoF,gBAASnF,mCAA6CM,EAAKsD,mBAElE,KACDwB,OAAOC,aA8BH,IAAIF,gBAASnF,oCA7BnBM,EAAKY,OACLZ,EAAKP,OAAOuF,UAEZhF,EAAKH,UAAUoF,UAAY,GAEP,WAAhB5B,EAAOD,IAA+C,kBAA1BA,EAAKG,YAAYC,KAC/CxD,EAAKP,OAASqF,OAAOC,OAAOG,cAAc,CACxC5E,MAAM,EACNE,UAAU,EACV2E,cAAe/B,EAAK+B,cACpBtF,UAAWG,EAAKH,YAIlBG,EAAKP,OAASqF,OAAOC,OAAOG,cAAc,CACxC5E,MAAM,EACNE,UAAU,EACV4C,KAAAA,EACAvD,UAAWG,EAAKH,YAIpBG,EAAKP,OAAOS,iBAAiB,aAAa,WAExCF,EAAKH,UAAUqE,MAAMF,MAAQ,GAC7BhE,EAAKH,UAAUqE,MAAMD,OAAS,KAC9BjE,UAAAA,EAAgC,CAACwC,YAAY,OAOnDxC,EAAKiB,aAAe,EACpBjB,EAAKyB,YAAc,mCAQQ,gBAAEe,IAAAA,WACzB7B,EAAQX,EAAKJ,QAAQI,EAAKK,gBAAgBM,MAC1CqB,EAAahC,EAAKJ,QAAQI,EAAKK,gBAAgB2B,WAC/CoB,EAAOpD,EAAKJ,QAAQI,EAAKK,gBAAgB+C,KACzCgC,EAAgBpF,EAAKG,aAAakF,IAAI1E,GACtC2E,EAAqBtF,EAAKS,kBAAkB4E,IAAIrD,GAChDuD,EAAQvF,EAAKJ,QAAQI,EAAKK,gBAAgBkF,MAAQvF,EAAKJ,QAAQI,EAAKK,gBAAgBkF,MAAQ,EAC5FC,EAAQxF,EAAKJ,QAAQI,EAAKK,gBAAgBmF,MAAQxF,EAAKJ,QAAQI,EAAKK,gBAAgBmF,MAAQ,EAI3FhD,KAAeY,GAASpD,EAAKJ,QAAQI,EAAKJ,QAAQ2C,OAAS,GAAGG,OAAiC,IAAxB1C,EAAKK,gBAIjFuB,YAAY,WACNwD,EACFA,EAAcK,OACK,SAAV9E,IACTX,EAAKP,OAAOa,MAAO,EACnBN,EAAKP,OAAOe,UAAW,GAErB8E,GACFA,EAAmBG,OAEjBzF,EAAKP,OAAOe,WACdR,EAAKP,OAAOyD,eAAc,KAC1BlD,UAAAA,GAAyB,IAE3BA,EAAKP,OAAOiG,SAASH,KACpBC,KAlBDxF,UAAAA,oCAsBa,SAAC2F,EAAGC,OAER,IAAPD,IAAmB,IAAPC,EAAU,KAElBC,EAAM7F,EAAK8F,2BAA2BH,EAAGC,GAG/CD,EAAIE,EAAIF,EACRC,EAAIC,EAAID,MAIJG,EAAS/F,EAAKJ,QAAQoG,MAAK,gBAAGC,IAAAA,YAC9BA,EAAU,IACRC,MAAMC,QAAQF,EAASN,IAAMO,MAAMC,QAAQF,EAASL,UAC/CD,GAAKM,EAASN,EAAE,IAAMA,GAAKM,EAASN,EAAE,IAAMC,GAAKK,EAASL,EAAE,IAAMA,GAAKK,EAASL,EAAE,GACpF,IAAKQ,OAAOC,MAAMJ,EAASN,KAAOS,OAAOC,MAAMJ,EAASL,UACtDD,IAAMM,EAASN,GAAKC,IAAMK,EAASL,SAIvC,QAIJG,KAKe,SAAhBA,EAAO9D,MAAyC,SAAtB8D,EAAO/D,WAAuB,KAEpDsE,GAAYX,EAAII,EAAOE,SAASN,EAAE,KAAOI,EAAOE,SAASN,EAAE,GAAKI,EAAOE,SAASN,EAAE,IAClFY,GAAYX,EAAIG,EAAOE,SAASL,EAAE,KAAOG,EAAOE,SAASL,EAAE,GAAKG,EAAOE,SAASL,EAAE,IAExF5F,EAAKP,OAAO0D,aAAa4C,EAAOrE,QAAQ,GAEpCqE,EAAOE,SAASL,EAAE,GAAK,GAAKG,EAAOE,SAASL,EAAE,GAAK,EACrD5F,EAAKP,OAAOgD,YAAY+D,KAAKC,MAAMH,EAAWtG,EAAKP,OAAOoC,cAAc,GAExE7B,EAAKP,OAAOgD,YAAY+D,KAAKE,MAAOJ,EAAWC,GAAY,EAAKvG,EAAKP,OAAOoC,cAAc,OAEnE,SAAhBkE,EAAO9D,KAChBjC,EAAKP,OAAO0D,aAAa4C,EAAOrE,QAAQ,GACf,SAAhBqE,EAAO9D,OAEa,IAAzBjC,EAAKP,OAAOqB,UACdd,EAAKP,OAAOyD,gBAEdlD,EAAKP,OAAO0D,aAAa4C,EAAOrE,SACP,SAAhBqE,EAAO9D,MAEhBjC,EAAKP,OAAOgD,YAAYsD,EAAOrE,OAAO,IAAI,oCAK7B,eAETiF,EAAiB3G,EAAK4G,yBAGtBb,EAAS/F,EAAKJ,QAAQoG,MAC1B,gBAAGa,IAAAA,kBAAiBF,GAAkBE,EAAW,IAAMF,GAAkBE,EAAW,SAIjFd,KAKe,SAAhBA,EAAO9D,KAAiB,KAEpB6E,EAAQf,EAAOrE,OAAO,GACtBqF,EAA8B,GAAxBhB,EAAOrE,OAAOa,OAAcwD,EAAOrE,OAAO,GAAM1B,EAAKP,OAAOoC,YAAc,EAKzD,OAAzB7B,EAAKgH,kBACPhH,EAAKP,OAAOyD,eAAc,GAC1BlD,EAAKgH,gBAAkB,MAGzBhH,EAAKP,OAAOgD,YACVqE,EAAQN,KAAKS,OACTN,EAAiBZ,EAAOc,WAAW,KAAOd,EAAOc,WAAW,GAAKd,EAAOc,WAAW,KAClFE,EAAMD,KAEX,OAEuB,SAAhBf,EAAO9D,MAChBjC,EAAKP,OAAOa,MAAO,GAEU,OAAzBN,EAAKgH,iBAOHhH,EAAKgH,kBAAoBjB,EAAOrE,SAML,IAAzB1B,EAAKP,OAAOqB,YAXlBd,EAAKP,OAAO0D,aAAa4C,EAAOrE,QAAQ,GACxC1B,EAAKgH,gBAAkBjB,EAAOrE,SAgBP,SAAhBqE,EAAO9D,KAEXjC,EAAKkH,oBACRlH,EAAKkH,mBAAoB,EACzBlH,EAAKP,OAAOyD,eAAc,GAC1BlD,EAAKP,OAAO0C,QAEW,SAAhB4D,EAAO9D,MAEhBjC,EAAKP,OAAOgD,YAAYsD,EAAOrE,OAAO,IAAI,WArxBvC4B,cAAgB7D,EAGG,WAAlB4D,EAAO5D,IAAmD,kBAA5BA,EAAO8D,YAAYC,KAA2B,IAC1D,iBAAX/D,EAAqB,KACxB4E,EAAOC,SAASC,cAAc9E,GAEhC4E,GAhBe,kBAgBPA,EAAKG,WACf/E,EAAS4E,EAAKK,kBAEPjF,aAAkBmF,aAnBR,kBAmBuBnF,EAAO+E,WACjD/E,EAASA,EAAOiF,iBAIbjF,EAAQ,KACP0H,EAAUzH,EAAe,oBAAsBD,EAAS,qBAEtD,IAAIoF,MAAMsC,IAKK,iBAAdtH,IACTA,EAAYyE,SAASC,cAAc1E,IAIhCA,IACHA,EAAYJ,EAAO2H,cAGhB3H,OAASA,OACTiE,gBAAkB2D,KAAK5H,OAAO2D,KAAOiE,KAAK5H,OAAOgE,SAAW,aAC5DgB,mBAAoB,OACpB5E,UAAYA,OACZC,KAAOA,OACPF,QAAUA,OACVG,QAAUA,OACViH,gBAAkB,UAClBE,mBAAoB,OAGpB7G,eAAiB,OACjBY,aAAe,OACfQ,YAAc,OACdtB,aAAe,IAAImH,SACnB7G,kBAAoB,IAAI6G,kFAKLD,KAAKxH,UAAUiE,wBAA/ByD,IAAAA,IAAKtD,IAAAA,cAGGa,OAAO0C,YAAcD,IACzBzC,OAAO0C,YAAcvD,sDAIRwD,EAASC,SACGL,KAAKxH,UAAUiE,wBAA5CyD,IAAAA,UAKD,CAAE5B,GAHE8B,IAFEE,QAAM3D,MAKP4B,GAFD8B,EAAUH,KAHKtD,4CASpB2D,EAAcP,KAEF,WAAdA,KAAKvH,UACFL,OAAOS,iBAAiB,aAAa,WACxC0H,EAAYnI,OAAOmB,OACnBkE,OAAO5E,iBAAiB,WAAU0H,SAEb,WAAdP,KAAKvH,UACTL,OAAOS,iBAAiB,aAAa,WAGpC0H,EAAYhI,SACiB,IAA/BgI,EAAYhI,QAAQ2C,OACgB,UAAhCqF,EAAYhI,QAAQ,GAAGqC,MACzB2F,EAAYnI,OAAOa,MAAO,EAC1BsH,EAAYnI,OAAOmB,OACnBgH,EAAY/H,UAAUK,iBAAiB,UAAS0H,OACP,UAAhCA,EAAYhI,QAAQ,GAAGqC,MAChC2F,EAAYnI,OAAOa,MAAO,EAC1BsH,EAAYnI,OAAOmB,OACnBgH,EAAY/H,UAAUK,iBAAiB,eAAc0H,OACZ,SAAhCA,EAAYhI,QAAQ,GAAGqC,MAAmD,cAAhC2F,EAAYhI,QAAQ,GAAGqC,MAC1E2F,EAAY/H,UAAUK,iBAAiB,eAAc0H,MACrDA,EAAY/H,UAAUK,iBAAiB,eAAc0H,OACZ,SAAhCA,EAAYhI,QAAQ,GAAGqC,OAChC2F,EAAYnI,OAAOa,MAAO,EAC1BsH,EAAYnI,OAAOmB,OACnBgH,EAAY/H,UAAUK,iBAAiB,cAAa0H,MACpDA,EAAY/H,UAAUK,iBAAiB,aAAY0H,QAGrDA,EAAYnI,OAAOa,MAAO,EAC1BsH,EAAYnI,OAAOmB,OACnBgH,EAAY/H,UAAUK,iBAAiB,cAAa0H,MACpDA,EAAY/H,UAAUK,iBAAiB,aAAY0H,UAGhC,UAAdP,KAAKvH,OAEVuH,KAAK5H,OAAOoI,YACdD,UAAAA,GACAA,EAAYnI,OAAOa,MAAO,EAC1BsH,EAAYnI,OAAOmB,SACnBgH,UAAAA,EAAuC,CAACpF,YAAY,UAE/C/C,OAAOS,iBAAiB,aAAa,aACxC0H,UAAAA,GACAA,EAAYnI,OAAOa,MAAO,EAC1BsH,EAAYnI,OAAOmB,SACnBgH,UAAAA,EAAuC,CAACpF,YAAY,uDAM3C5C,IAAAA,QAASC,IAAAA,UAAWC,IAAAA,KAAML,IAAAA,OAAWM,uDAC/Ca,YACAnB,OAAOmB,YAGP0C,cAAgB7D,EAGG,WAAlB4D,EAAO5D,IAAmD,kBAA5BA,EAAO8D,YAAYC,KAA2B,IAC1D,iBAAX/D,EAAqB,KACxB4E,EAAOC,SAASC,cAAc9E,GAEhC4E,GAlJe,kBAkJPA,EAAKG,WACf/E,EAAS4E,EAAKK,kBAEPjF,aAAkBmF,aArJR,kBAqJuBnF,EAAO+E,WACjD/E,EAASA,EAAOiF,iBAIbjF,QAGG,IAAIoF,MAFInF,EAAe,oBAAsBD,EAAS,eAEnCA,GAKJ,iBAAdI,IACTA,EAAYyE,SAASC,cAAc1E,IAIhCA,IACHA,EAAYJ,EAAO2H,cAGhB3H,OAASA,OACTiE,gBAAkB2D,KAAK5H,OAAO2D,KAAOiE,KAAK5H,OAAOgE,SAAW,aAC5DgB,mBAAoB,OACpB5E,UAAYA,OACZC,KAAOA,OACPF,QAAUA,OACVG,QAAUA,OACViH,gBAAkB,UAClBE,mBAAoB,OAGpB7G,eAAiB,OACjBY,aAAe,OACfQ,YAAc,OACdtB,aAAe,IAAImH,SACnB7G,kBAAoB,IAAI6G,SAExBR,uCAIa,WAAdO,KAAKvH,MACPgF,OAAO5D,oBAAoB,WAAUmG,SAGrB,WAAdA,KAAKvH,YACAD,UAAUqB,oBAAoB,UAASmG,cACvCxH,UAAUqB,oBAAoB,eAAcmG,cAC5CxH,UAAUqB,oBAAoB,cAAamG,cAC3CxH,UAAUqB,oBAAoB,aAAYmG,UAGjC,UAAdA,KAAKvH,YACFD,UAAUqB,oBAAoB,UAASmG,cACvCxH,UAAUqB,oBAAoB,UAASmG,cAEvCxH,UAAUqB,oBAAoB,eAAcmG,cAC5CxH,UAAUqB,oBAAoB,eAAcmG,cAC5CxH,UAAUqB,oBAAoB,eAAcmG,cAE5CxH,UAAUqB,oBAAoB,eAAcmG,cAC5CxH,UAAUqB,oBAAoB,cAAamG,cAC3CxH,UAAUqB,oBAAoB,aAAYmG,cAE1C5H,OAAOyB,oBAAoB,iBAAgBmG,cAC3C5H,OAAOyB,oBAAoB,aAAYmG,cACvC5H,OAAOyB,oBAAoB,eAAcmG,cACzC5H,OAAOyB,oBAAoB,eAAcmG,2SAykBvCS,EAAS,SAAA/H,OACdgI,EAAW,IAAIpI,EAAoBI,UACzCgI,EAASjB,QAEFiB"}